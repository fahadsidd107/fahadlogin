{"version":3,"sources":["logo.svg","core.js","components/login/login.jsx","components/signup/signup.jsx","components/dashboard/dashboard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["baseUrl","window","location","hostname","split","validationSchema","yup","email","required","password","min","max","Login","history","useHistory","formik","useFormik","initialValues","onSubmit","values","console","log","axios","post","then","res","data","alert","setTimeout","push","style","padding","margin","textAlign","handleSubmit","Grid","container","spacing","item","xl","lg","xs","sm","md","sx","width","Stack","TextField","color","id","label","placeholder","variant","name","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","marginBottom","contact","address","website","url","Signup","Dashboard","App","path","exact","render","to","pathname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"wNAAe,I,4FCEFA,EAAqD,cAA3CC,OAAOC,SAASC,SAASC,MAAM,KAAK,GAD/C,wBAC0E,G,OCShFC,EAAmBC,IAAW,CAEhCC,MAAOD,IACK,oBACPC,MAAM,uBACNC,SAAS,qBAEdC,SAAUH,IACE,uBACPI,IAAI,EAAG,qDACPC,IAAI,GAAI,mBACRH,SAAS,0BAqFHI,MAlFf,WACI,IAAIC,EAAUC,cACRC,EAASC,YAAU,CACrBX,iBAAkBA,EAClBY,cAAe,CACXV,MAAO,GACPE,SAAU,IAEdS,SAAU,SAAUC,GAChBC,QAAQC,IAAI,WAAYF,GACxBG,IAAMC,KAAN,UAAcvB,EAAd,iBAAsC,CAClCO,MAAOY,EAAOZ,MACdE,SAAUU,EAAOV,WAEhBe,MAAK,SAACC,GACHL,QAAQC,IAAI,QAASI,EAAIC,MACrBD,EAAIC,KAAKnB,OACToB,MAAM,aACNC,YAAW,WACPf,EAAQgB,KAAK,gBACd,MAGHF,MAAM,gCAM1B,OAEI,sBAAKG,MAAO,CAAEC,QAAS,QAAvB,UACI,oBAAID,MAAO,CAAEE,OAAQ,OAAQD,QAAS,OAAQE,UAAW,UAAzD,oBACA,uBACA,sBAAMf,SAAUH,EAAOmB,aAAvB,SACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,CAAEC,MAAO,MAAOb,OAAQ,QAA7E,SACI,cAAC,IAAD,UACI,eAACc,EAAA,EAAD,CAAOT,QAAS,EAAhB,UACI,cAACU,EAAA,EAAD,CACIC,MAAM,UACNC,GAAG,iBACHC,MAAM,QACNC,YAAY,sBACZC,QAAQ,WACRC,KAAK,QACLC,MAAOvC,EAAOI,OAAOZ,MACrBgD,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQnD,OAASoD,QAAQ5C,EAAO6C,OAAOrD,OACrDsD,WAAY9C,EAAO2C,QAAQnD,OAASQ,EAAO6C,OAAOrD,QAGtD,cAACwC,EAAA,EAAD,CACIC,MAAM,UACNC,GAAG,eACHC,MAAM,WACNC,YAAY,sBACZC,QAAQ,WACRU,KAAK,WACLT,KAAK,WACLC,MAAOvC,EAAOI,OAAOV,SACrB8C,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQjD,UAAYkD,QAAQ5C,EAAO6C,OAAOnD,UACxDoD,WAAY9C,EAAO2C,QAAQjD,UAAYM,EAAO6C,OAAOnD,WAIzD,cAAC0B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA7C,SACI,cAAC,IAAD,UACI,cAACoB,EAAA,EAAD,CAAQnB,GAAI,CAAEoB,aAAc,MAAQZ,QAAQ,YAAYJ,MAAM,UAAUc,KAAK,SAA7E,uCCnFlCzD,EAAmBC,IAAW,CAEhC+C,KAAM/C,IACM,mBACPE,SAAS,oBAEdD,MAAOD,IACK,oBACPC,MAAM,uBACNC,SAAS,qBAEdC,SAAUH,IACE,uBACPI,IAAI,EAAG,qDACPC,IAAI,GAAI,mBACRH,SAAS,wBAEdyD,QAAS3D,IACG,sBACPI,IAAI,GAAI,kBACRC,IAAI,GAAI,kBACRH,SAAS,8BAEd0D,QAAS5D,IACG,sBACPE,SAAS,uBACd2D,QAAS7D,IACG,0BACP8D,IAAI,uDACJ5D,SAAS,6BA8IH6D,MA3If,WACI,IAAIxD,EAAUC,cACRC,EAASC,YAAU,CACrBX,iBAAkBA,EAClBY,cAAe,CACXoC,KAAM,GACN9C,MAAO,GACPE,SAAU,GACVwD,QAAS,GACTC,QAAS,GACTC,QAAS,IAEbjD,SAAU,SAAUC,GAChBC,QAAQC,IAAI,WAAYF,GACxBG,IAAMC,KAAN,UAAcvB,EAAd,kBAAuC,CACnCqD,KAAMlC,EAAOkC,KACb9C,MAAOY,EAAOZ,MACdE,SAAUU,EAAOV,SACjBwD,QAAS9C,EAAO8C,QAChBC,QAAS/C,EAAO+C,QAChBC,QAAShD,EAAOgD,UAEf3C,MAAK,SAACC,GACHL,QAAQC,IAAI,QAASI,EAAIC,MACR,oBAAbD,EAAIC,OACJC,MAAM,aACNC,YAAW,WACPf,EAAQgB,KAAK,YACd,YAMvB,OAEI,sBAAKC,MAAO,CAAEC,QAAS,QAAvB,UACI,oBAAID,MAAO,CAAEE,OAAQ,OAAQD,QAAS,OAAQE,UAAW,UAAzD,qBACA,uBACA,sBAAMf,SAAUH,EAAOmB,aAAvB,SACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,CAAEC,MAAO,MAAOb,OAAQ,QAA7E,SACI,cAAC,IAAD,UACI,eAACc,EAAA,EAAD,CAAOT,QAAS,EAAhB,UACI,cAACU,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,iBACHC,MAAM,OACNC,YAAY,kBACZC,QAAQ,WACRC,KAAK,OACLC,MAAOvC,EAAOI,OAAOkC,KACrBE,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQL,MAAQM,QAAQ5C,EAAO6C,OAAOP,MACpDQ,WAAY9C,EAAO2C,QAAQL,MAAQtC,EAAO6C,OAAOP,OAGrD,cAACN,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,iBACHC,MAAM,QACNC,YAAY,sBACZC,QAAQ,WACRC,KAAK,QACLC,MAAOvC,EAAOI,OAAOZ,MACrBgD,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQnD,OAASoD,QAAQ5C,EAAO6C,OAAOrD,OACrDsD,WAAY9C,EAAO2C,QAAQnD,OAASQ,EAAO6C,OAAOrD,QAGtD,cAACwC,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,eACHC,MAAM,WACNC,YAAY,sBACZC,QAAQ,WACRU,KAAK,WACLT,KAAK,WACLC,MAAOvC,EAAOI,OAAOV,SACrB8C,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQjD,UAAYkD,QAAQ5C,EAAO6C,OAAOnD,UACxDoD,WAAY9C,EAAO2C,QAAQjD,UAAYM,EAAO6C,OAAOnD,WAGzD,cAACsC,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,eACHC,MAAM,UACNC,YAAY,4BACZC,QAAQ,WAERC,KAAK,UACLC,MAAOvC,EAAOI,OAAO8C,QACrBV,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQO,SAAWN,QAAQ5C,EAAO6C,OAAOK,SACvDJ,WAAY9C,EAAO2C,QAAQO,SAAWlD,EAAO6C,OAAOK,UAGxD,cAAClB,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,eACHC,MAAM,UACNC,YAAY,qBACZC,QAAQ,WACRC,KAAK,UACLC,MAAOvC,EAAOI,OAAO+C,QACrBX,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQQ,SAAWP,QAAQ5C,EAAO6C,OAAOM,SACvDL,WAAY9C,EAAO2C,QAAQQ,SAAWnD,EAAO6C,OAAOM,UAGxD,cAACnB,EAAA,EAAD,CACIC,MAAM,YACNC,GAAG,iBACHC,MAAM,UACNC,YAAY,gBACZC,QAAQ,WACRC,KAAK,UACLC,MAAOvC,EAAOI,OAAOgD,QACrBZ,SAAUxC,EAAOyC,aACjBC,MAAO1C,EAAO2C,QAAQS,SAAWR,QAAQ5C,EAAO6C,OAAOO,SACvDN,WAAY9C,EAAO2C,QAAQS,SAAWpD,EAAO6C,OAAOO,UAGxD,cAAChC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA7C,SACI,cAAC,IAAD,UACI,cAACoB,EAAA,EAAD,CAAQnB,GAAI,CAAEoB,aAAc,MAAQZ,QAAQ,YAAYJ,MAAM,UAAUc,KAAK,SAA7E,wCClKzBQ,MANf,WACI,OACI,8CCsCOC,MA1Bf,WACE,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOE,OAAQ,kBAAM,cAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,gBCvBxCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCEdO,IAASX,OACP,cAAC,IAAMY,WAAP,UACC,cAAC,IAAD,UACG,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.3d9fd1e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nconst dev = \"http://localhost:5000\"\r\nexport const baseUrl = window.location.hostname.split(\":\")[0] === \"localhost\" ? dev : \"\";","import { Formik, Field, Form, useFormik } from \"formik\";\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { Grid } from '@mui/material';\r\nimport Item from '@mui/material/Grid'\r\nimport * as yup from 'yup';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { baseUrl } from \"./../../core\"\r\n\r\nconst validationSchema = yup.object({\r\n\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .max(10, 'No more then 10')\r\n        .required('Password is required'),\r\n});\r\n\r\nfunction Login() {\r\n    let history = useHistory();\r\n    const formik = useFormik({\r\n        validationSchema: validationSchema,\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: function (values) {\r\n            console.log(\"values: \", values)\r\n            axios.post(`${baseUrl}/api/v1/login`, {\r\n                email: values.email,\r\n                password: values.password,\r\n            })\r\n                .then((res) => {\r\n                    console.log(\"res: \", res.data);\r\n                    if (res.data.email) {\r\n                        alert(\"logged in\")\r\n                        setTimeout(() => {\r\n                            history.push(\"/dashboard\")\r\n                        }, 1000);\r\n                    }\r\n                    else {\r\n                        alert(\"invalid password/email\")\r\n                    }\r\n                })\r\n        }\r\n    });\r\n\r\n    return (\r\n\r\n        <div style={{ padding: \"1rem\" }}>\r\n            <h1 style={{ margin: \"auto\", padding: \"1rem\", textAlign: \"center\" }}>Log In</h1>\r\n            <br />\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xl={6} lg={6} xs={12} sm={12} md={12} sx={{ width: \"50%\", margin: \"auto\" }} >\r\n                        <Item >\r\n                            <Stack spacing={3}  >\r\n                                <TextField\r\n                                    color=\"primary\"\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"enter email address\"\r\n                                    variant=\"outlined\"\r\n                                    name=\"email\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                    helperText={formik.touched.email && formik.errors.email}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"primary\"\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Password\"\r\n                                    placeholder=\"enter your password\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                                    helperText={formik.touched.password && formik.errors.password}\r\n                                />\r\n\r\n\r\n                                <Grid item xl={6} lg={6} xs={12} sm={12} md={12}  >\r\n                                    <Item >\r\n                                        <Button sx={{ marginBottom: \"1%\" }} variant=\"contained\" color=\"primary\" type=\"submit\" >Log in</Button>\r\n                                      \r\n                                    </Item >\r\n                                </Grid>\r\n                            </Stack>\r\n                        </Item >\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import { Formik, Field, Form, useFormik } from \"formik\";\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { Grid } from '@mui/material';\r\nimport Item from '@mui/material/Grid'\r\nimport * as yup from 'yup';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { baseUrl } from \"./../../core\"\r\n\r\nconst validationSchema = yup.object({\r\n\r\n    name: yup\r\n        .string('Enter your Name')\r\n        .required('Name is required'),\r\n\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .max(10, 'No more then 10')\r\n        .required('Password is required'),\r\n\r\n    contact: yup\r\n        .string('Enter your Contact')\r\n        .min(11, \"invalid number\")\r\n        .max(11, \"invalid number\")\r\n        .required('contact number is required'),\r\n\r\n    address: yup\r\n        .string('Enter your address')\r\n        .required('Address is required'),\r\n    website: yup\r\n        .string('Enter your profile/URL')\r\n        .url(\"please enter valid URL e.g: https://somewebsite.com\")\r\n        .required('profile/URL is required'),\r\n});\r\n\r\nfunction Signup() {\r\n    let history = useHistory();\r\n    const formik = useFormik({\r\n        validationSchema: validationSchema,\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            contact: '',\r\n            address: '',\r\n            website: '',\r\n        },\r\n        onSubmit: function (values) {\r\n            console.log(\"values: \", values)\r\n            axios.post(`${baseUrl}/api/v1/signup`, {\r\n                name: values.name,\r\n                email: values.email,\r\n                password: values.password,\r\n                contact: values.contact,\r\n                address: values.address,\r\n                website: values.website,\r\n            })\r\n                .then((res) => {\r\n                    console.log(\"res: \", res.data);\r\n                    if (res.data === \"profile created\") {\r\n                        alert(\"Signed up\")\r\n                        setTimeout(() => {\r\n                            history.push(\"/login\")\r\n                        }, 1000);\r\n                    }\r\n                })\r\n        }\r\n    });\r\n\r\n    return (\r\n\r\n        <div style={{ padding: \"1rem\" }}>\r\n            <h1 style={{ margin: \"auto\", padding: \"1rem\", textAlign: \"center\" }}>Sign Up</h1>\r\n            <br />\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xl={6} lg={6} xs={12} sm={12} md={12} sx={{ width: \"50%\", margin: \"auto\" }} >\r\n                        <Item >\r\n                            <Stack spacing={3}  >\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Name\"\r\n                                    placeholder=\"enter your name\"\r\n                                    variant=\"outlined\"\r\n                                    name=\"name\"\r\n                                    value={formik.values.name}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    helperText={formik.touched.name && formik.errors.name}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Email\"\r\n                                    placeholder=\"enter email address\"\r\n                                    variant=\"outlined\"\r\n                                    name=\"email\"\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                    helperText={formik.touched.email && formik.errors.email}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Password\"\r\n                                    placeholder=\"enter your password\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                                    helperText={formik.touched.password && formik.errors.password}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Contact\"\r\n                                    placeholder=\"enter your Contact Number\"\r\n                                    variant=\"outlined\"\r\n                                    // type=\"s\"\r\n                                    name=\"contact\"\r\n                                    value={formik.values.contact}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.contact && Boolean(formik.errors.contact)}\r\n                                    helperText={formik.touched.contact && formik.errors.contact}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"filled-basic\"\r\n                                    label=\"address\"\r\n                                    placeholder=\"enter your address\"\r\n                                    variant=\"outlined\"\r\n                                    name=\"address\"\r\n                                    value={formik.values.address}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.address && Boolean(formik.errors.address)}\r\n                                    helperText={formik.touched.address && formik.errors.address}\r\n                                />\r\n\r\n                                <TextField\r\n                                    color=\"secondary\"\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Website\"\r\n                                    placeholder=\"enter Website\"\r\n                                    variant=\"outlined\"\r\n                                    name=\"website\"\r\n                                    value={formik.values.website}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.website && Boolean(formik.errors.website)}\r\n                                    helperText={formik.touched.website && formik.errors.website}\r\n                                />\r\n\r\n                                <Grid item xl={6} lg={6} xs={12} sm={12} md={12}  >\r\n                                    <Item >\r\n                                        <Button sx={{ marginBottom: \"1%\" }} variant=\"contained\" color=\"primary\" type=\"submit\" >Sign up</Button>\r\n                                       \r\n                                    </Item >\r\n                                </Grid>\r\n                            </Stack>\r\n                        </Item >\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Signup;","\r\nfunction Dashboard() {\r\n    return (\r\n        <h1> Home Page </h1>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from \"./components/login/login\"\nimport Signup from \"./components/signup/signup\"\nimport Dashboard from \"./components/dashboard/dashboard\"\n\nfunction App() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n\n        <Route path=\"/signup\">\n          <Signup />\n        </Route>\n\n        <Route exact path=\"/\">\n          <Signup />\n        </Route>\n\n        <Route path=\"/dashboard\">\n          <Dashboard />\n        </Route>\n\n        <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n   <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}